{"version":3,"sources":["../../src/tasks/guide.js"],"names":["fs","require","path","cheerio","getAllFiles","rootPath","callback","filesArr","dir","relativePath","files","readdirSync","err","console","log","forEach","file","stat","statSync","isDirectory","push","module","exports","cfg","gulp","task","data","explorer","dir_pages","temp","JSON","stringify","Buffer","writeFile","dir_docs","filePath","json","existsSync","parse","readFileSync","e","pathDir","explorerZh","fn","thisFn","list","test","currentPath","i","length","result","text","state","opened","children","match","fileObject","icon","a_attr","fileStr","$$","load","decodeEntities","href","relative","title"],"mappings":"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","file":"guide.js","sourcesContent":["'use strict';\n/**\n * @author linjilin\n * @lastmodifiedDate 2016/07/19\n */\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar cheerio = require('cheerio');\n\n/**\n * 获取路径下所有文件名列表\n * @method getAllFiles\n * @param  {String}    rootPath [根目录路径]\n * @param  {Function}  callback [获得每个文件的文件名后的回调]\n * @return {Array}              [文件名数据]\n */\n // TODO: 这个方法未实际应用\nfunction getAllFiles(rootPath, callback) {\n  var filesArr = [];\n  (function dir(relativePath) {\n    try {\n      var files = fs.readdirSync(relativePath);\n    } catch (err) {\n      console.log(`err\\n${err}`);\n      return;\n    }\n    files.forEach((file) => {\n      const stat = fs.statSync(`${relativePath}/${file}`);\n      if (stat.isDirectory()) {\n        dir(`${relativePath}/${file}`, callback);\n      } else {\n        filesArr.push(`${relativePath}/${file}`);\n        callback && callback(`${relativePath}/${file}`);\n      }\n    });\n  }(rootPath));\n  return filesArr;\n}\n\nmodule.exports = function(cfg, gulp) {\n  //遍历目录下的文件生成页面目录结构对象\n  gulp.task('guide', () => {\n\n    // let test = getAllFiles(cfg.dir_pages, function(){\n    // });\n    // console.log(test);\n    // return;\n\n    var data = {\n      data: explorer(cfg.dir_pages)\n    };\n\n    var temp = 'var pagesPath = ' + JSON.stringify(data, null, '  ') + ';';\n    temp = new Buffer(temp);\n    fs.writeFile(cfg.dir_docs + '/js/pages_path.js', temp, function(err) {\n      if (err) {\n        throw err;\n      }\n    });\n    return;\n  }); //guide end\n\n  var explorer = function(relativePath) {\n    //根据docs目录，返回到gulp根目录，以便静态html文件能够直接被打开\n    var filePath = `${cfg.dir_docs}/pages_path_maps.json`; //用于定义页面导航中，文件夹的中文显示\n    var json;\n    if (fs.existsSync(filePath)) {\n      try {\n        json = JSON.parse(fs.readFileSync(filePath));\n      } catch (e) {\n        console.log('read pages_path_maps.json err', e);\n        json = {};\n      }\n    } else {\n      console.log('no pages_path_maps.json!!!!!!!!!!!');\n      json = {};\n    }\n    if (!json.pathDir) {\n      json.pathDir = {};\n    }\n    var explorerZh = json.pathDir;\n\n    //用于生成重构导航页面：具体任务\n    var fn = function thisFn(relativePath) {\n      var list = [];\n      var files;\n      var temp\n      try {\n        files = fs.readdirSync(relativePath);\n      } catch (err) {\n        console.log('err:\\n' + err);\n        return;\n      }\n\n      files.forEach(function(file) {\n        //不遍历文档文件夹\n        if (/^doc.$/.test(file)) {\n          return;\n        }\n        const currentPath = `${relativePath}/${file}`; // 当前文件路径\n        var stat = fs.statSync(currentPath);\n        var i = list.length;\n        if (stat.isDirectory()) {\n          //一开始会优先遍历文件夹的最深层。如果遍历的文件夹中没有文件（因为有后面的判断，只有文件夹的文件夹也不会记录），则不会把文件夹节点添加进列表\n          var result = thisFn(currentPath);\n          if (result.length !== 0) {\n            temp = explorerZh[file] || file; //如果在pages_path_maps.json中找不到中文对应，则取原文件夹名\n            json.pathDir[file] = explorerZh[file] || ''; //储存进json里，在json里设置了的则保留，否则为空\n            list.push({\n              text: temp, //如果有文件夹翻译就从翻译中取列表名，否则取文件夹名字\n              state: {\n                opened: true\n              },\n              children: result //遍历此文件夹内容后的结果\n            });\n          }\n        } else if (file.match(/.\\.html/)) {\n          const fileObject = {\n            icon: 'jstree-file',\n            a_attr: {}\n          };\n          //读取文件里的title列表名\n          var fileStr = fs.readFileSync(currentPath, 'utf-8');\n          var $$ = cheerio.load(fileStr, {decodeEntities: false});\n          try {\n            fileObject.text = $$('title')[0].children[0].data;\n          } catch (e) {\n            fileObject.text = file;\n          }\n          //因为gulp服务器根目录为src，所以替换路径部分内容以方便静态文件的导航\n          fileObject.a_attr.href = path.relative(cfg.dir_docs, currentPath);\n          fileObject.a_attr.title = fileObject.text;\n          list.push(fileObject);\n        }\n      });\n      return list;\n    };\n\n    var list = fn(relativePath);\n\n    var temp = JSON.stringify(json, null, '  ');\n    temp = new Buffer(temp);\n    fs.writeFile(filePath, temp, function(err) {\n      if (err) {\n        throw err;\n      }\n    });\n    return list;\n  };\n\n};\n"]}