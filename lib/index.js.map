{"version":3,"sources":["../src/index.js"],"names":["init","gulp","cfg","uiConfig","defaultTmp","tmp","defaultDist","dist","css","tmpCss","js","tmpJs","distCss","distJs","img","distImg","console","log","JSON","stringify","blue","bgGreen","sassOption","includePaths","resolve","__dirname","task","src","dir_sass","pipe","dest","ext","on","logError","write","dir_js","path","basename","replace","presets","insertGlobals","debug","then","paths","join","bgRed","browsers","discardComments","removeAll","autoprefixer","zindex"],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path';\nimport chalk from 'chalk';\nimport newer from 'gulp-newer';\n\nimport plumber from 'gulp-plumber';\nimport sourcemaps from 'gulp-sourcemaps';\n\nimport useref from 'gulp-useref';\nimport gulpif from 'gulp-if';\nimport uglify from 'gulp-uglify';\n\nimport del from 'del';\n\nimport babel from 'gulp-babel';\nimport browserify from 'gulp-browserify';\nimport rename from 'gulp-rename';\n\nimport sass from 'gulp-sass';\nimport postcss from 'gulp-postcss';\nimport autoprefixer from 'autoprefixer';\nimport cssnano from 'cssnano';\n\nimport browserSync from './tasks/browserSync';\nimport guide from './tasks/guide';\nimport image from './tasks/image';\nimport render from './tasks/render';\nimport sprites from './tasks/sprites';\n\nexport default function init({\n  uiConfig: cfg\n}, gulp) {\n\n  // 不设置则默认调试时目录为 .tmp ，发布时为 dist;\n  const defaultTmp = (typeof cfg.tmp == 'string')\n    ? cfg.tmp // 如果设置了字符串。则统一采用该字符串\n    : '.tmp';\n  const defaultDist = (typeof cfg.dist == 'string')\n    ? cfg.dist\n    : 'dist';\n  const {\n    tmp: {\n      css: tmpCss = defaultTmp,\n      js: tmpJs = defaultTmp\n    } = {},\n    dist: {\n      css: distCss = defaultDist,\n      js: distJs = defaultDist,\n      img: distImg = defaultDist\n    } = {}\n  } = cfg;\n\n  // 初始化后的配置\n  cfg = {\n    ...cfg,\n    tmpCss,\n    tmpJs,\n    distCss,\n    distJs,\n    distImg\n  };\n\n  // use chalk\n  console.log(JSON.stringify(cfg, null, '  ').blue);\n  console.log(`You still need to run 'gulp build' to compress scripts and styles to dist.`.bgGreen);\n\n  /**\n   * 预处理样式\n   */\n  const sassOption = {\n    includePaths: [\n      path.resolve(__dirname, '../templates'),\n      'node_modules/'\n    ]\n  };\n  gulp.task('styles', () => {\n    return gulp\n      .src([`${cfg.dir_sass}/**/*.scss`])\n      .pipe(newer({dest: tmpCss, ext: '.css'}))\n      .pipe(plumber())\n      .pipe(sourcemaps.init())\n      .pipe(sass(sassOption).on('error', sass.logError))\n      .pipe(sourcemaps.write('./maps'))\n      .pipe(gulp.dest(tmpCss));\n  });\n  gulp.task('styles:force', () => {\n    return gulp\n      .src([`${cfg.dir_sass}/**/*.scss`])\n      .pipe(plumber())\n      .pipe(sourcemaps.init())\n      .pipe(sass(sassOption).on('error', sass.logError))\n      .pipe(sourcemaps.write('./maps'))\n      .pipe(gulp.dest(tmpCss));\n  });\n\n  /**\n   * babel browserify\n   * !!!\n   * babel-preset-es2015 会从使用该webkit的项目里找，而不会从这边找？？？\n   * !!!\n   */\n  gulp.task('scripts', () => {\n    return gulp\n      .src([`${cfg.dir_js}/**/*.babel.js`])\n      .pipe(rename(path => {\n        path.basename = path\n          .basename\n          .replace(/\\.babel/, '')\n      }))\n      .pipe(newer({dest: tmpJs}))\n      .pipe(plumber())\n      .pipe(sourcemaps.init())\n      .pipe(babel({\n        presets: ['es2015', 'stage-0']\n      }))\n      .pipe(browserify({insertGlobals: true, debug: true}))\n      .pipe(sourcemaps.write('./maps'))\n      .pipe(gulp.dest(tmpJs));\n  });\n\n  /**\n   * useref\n   */\n  // gulp.task('html', () => {   return gulp.src([`${cfg.dir_pages}/**/*.html`])\n  // .pipe(newer({dest: '.tmp/html'}))     .pipe(useref({searchPath: '.tmp'}))\n  // .pipe(gulpif('*.js', uglify()))\n  // .pipe(gulp.dest(`${cfg.dir_pages}`)); });\n  browserSync(cfg, gulp);\n  render(cfg, gulp);\n  sprites(cfg, gulp);\n  image(cfg, gulp);\n  guide(cfg, gulp);\n\n  /* clean build */\n  gulp.task('clean', () => {\n    del([`${cfg.dist}/**/*.css`, `${cfg.dist}/**/*.js`]).then(paths => {\n      console.log(`Deleted files and folders:\\n${paths.join('\\n')}`.bgRed);\n    })\n  });\n  /* build */\n  gulp.task('build', ['build-css', 'build-js']);\n  gulp.task('build-css', () => {\n    gulp\n      .src([\n      `${cfg.tmpCss}/**/*.css`, //\n      `!${cfg.tmpCss}/**/*.min.css` //\n    ])\n      .pipe(newer({dest: distCss, ext: '.min.css'}))\n      .pipe(postcss([\n        autoprefixer({\n          browsers: ['defaults', 'ie >= 8']\n        }),\n        cssnano({\n          discardComments: {\n            removeAll: true\n          },\n          autoprefixer: false,\n          zindex: false\n        })\n      ]))\n      .pipe(rename(path => {\n        path.basename += '.min';\n      }))\n      .pipe(gulp.dest(cfg.distCss))\n  });\n  gulp.task('build-js', () => {\n    gulp\n      .src(`${cfg.tmpJs}/**/*.js`)\n      .pipe(uglify())\n      .pipe(rename(path => {\n        path.basename += '.min';\n      }))\n      .pipe(gulp.dest(cfg.distJs))\n  });\n\n}\n"]}